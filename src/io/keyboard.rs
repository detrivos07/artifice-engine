/// Represents a key on the keyboard.
/// Keycodes follow the GLFW keycodes <https://www.glfw.org/docs/3.3/group__keys.html>
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum Key {
    Space = 32,
    Apostrophe = 39,
    Comma = 44,
    Minus = 45,
    Period = 46,
    Slash = 47,

    Num0 = 48,
    Num1 = 49,
    Num2 = 50,
    Num3 = 51,
    Num4 = 52,
    Num5 = 53,
    Num6 = 54,
    Num7 = 55,
    Num8 = 56,
    Num9 = 57,

    Semicolon = 59,
    Equal = 61,

    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,

    LeftBracket = 91,
    Backslash = 92,
    RightBracket = 93,
    GraveAccent = 96,

    // Function keys
    Escape = 256,
    Enter = 257,
    Tab = 258,
    Backspace = 259,
    Insert = 260,
    Delete = 261,
    Right = 262,
    Left = 263,
    Down = 264,
    Up = 265,
    PageUp = 266,
    PageDown = 267,
    Home = 268,
    End = 269,
    CapsLock = 280,
    ScrollLock = 281,
    NumLock = 282,
    PrintScreen = 283,
    Pause = 284,

    F1 = 290,
    F2 = 291,
    F3 = 292,
    F4 = 293,
    F5 = 294,
    F6 = 295,
    F7 = 296,
    F8 = 297,
    F9 = 298,
    F10 = 299,
    F11 = 300,
    F12 = 301,
    F13 = 302,
    F14 = 303,
    F15 = 304,
    F16 = 305,
    F17 = 306,
    F18 = 307,
    F19 = 308,
    F20 = 309,
    F21 = 310,
    F22 = 311,
    F23 = 312,
    F24 = 313,
    F25 = 314,

    Kp0 = 320,
    Kp1 = 321,
    Kp2 = 322,
    Kp3 = 323,
    Kp4 = 324,
    Kp5 = 325,
    Kp6 = 326,
    Kp7 = 327,
    Kp8 = 328,
    Kp9 = 329,
    KpDecimal = 330,
    KpDivide = 331,
    KpMultiply = 332,
    KpSubtract = 333,
    KpAdd = 334,
    KpEnter = 335,
    KpEqual = 336,

    LeftShift = 340,
    LeftControl = 341,
    LeftAlt = 342,
    LeftSuper = 343,
    RightShift = 344,
    RightControl = 345,
    RightAlt = 346,
    RightSuper = 347,
    Menu = 348,

    World1 = 161, // non-US #1
    World2 = 162, // non-US #2

    Unknown = -1,
}

impl Key {
    /// Returns the GLFW key code corresponding to this Key enum.
    ///
    /// # Returns
    ///
    /// The GLFW key code corresponding to this Key enum
    fn code(&self) -> i32 {
        *self as i32
    }
}

impl From<i32> for Key {
    /// Converts a GLFW key code to the corresponding Key enum.
    ///
    /// # Arguments
    ///
    /// * `glfw_key_code` - The GLFW key code to convert
    ///
    /// # Returns
    ///
    /// The corresponding Key enum, or Key::Unknown if no match is found
    fn from(glfw_key_code: i32) -> Self {
        match glfw_key_code {
            32 => Key::Space,
            39 => Key::Apostrophe,
            44 => Key::Comma,
            45 => Key::Minus,
            46 => Key::Period,
            47 => Key::Slash,
            48 => Key::Num0,
            49 => Key::Num1,
            50 => Key::Num2,
            51 => Key::Num3,
            52 => Key::Num4,
            53 => Key::Num5,
            54 => Key::Num6,
            55 => Key::Num7,
            56 => Key::Num8,
            57 => Key::Num9,
            59 => Key::Semicolon,
            61 => Key::Equal,
            65 => Key::A,
            66 => Key::B,
            67 => Key::C,
            68 => Key::D,
            69 => Key::E,
            70 => Key::F,
            71 => Key::G,
            72 => Key::H,
            73 => Key::I,
            74 => Key::J,
            75 => Key::K,
            76 => Key::L,
            77 => Key::M,
            78 => Key::N,
            79 => Key::O,
            80 => Key::P,
            81 => Key::Q,
            82 => Key::R,
            83 => Key::S,
            84 => Key::T,
            85 => Key::U,
            86 => Key::V,
            87 => Key::W,
            88 => Key::X,
            89 => Key::Y,
            90 => Key::Z,
            91 => Key::LeftBracket,
            92 => Key::Backslash,
            93 => Key::RightBracket,
            96 => Key::GraveAccent,
            256 => Key::Escape,
            257 => Key::Enter,
            258 => Key::Tab,
            259 => Key::Backspace,
            260 => Key::Insert,
            261 => Key::Delete,
            262 => Key::Right,
            263 => Key::Left,
            264 => Key::Down,
            265 => Key::Up,
            266 => Key::PageUp,
            267 => Key::PageDown,
            268 => Key::Home,
            269 => Key::End,
            280 => Key::CapsLock,
            281 => Key::ScrollLock,
            282 => Key::NumLock,
            283 => Key::PrintScreen,
            284 => Key::Pause,
            290 => Key::F1,
            291 => Key::F2,
            292 => Key::F3,
            293 => Key::F4,
            294 => Key::F5,
            295 => Key::F6,
            296 => Key::F7,
            297 => Key::F8,
            298 => Key::F9,
            299 => Key::F10,
            300 => Key::F11,
            301 => Key::F12,
            302 => Key::F13,
            303 => Key::F14,
            304 => Key::F15,
            305 => Key::F16,
            306 => Key::F17,
            307 => Key::F18,
            308 => Key::F19,
            309 => Key::F20,
            310 => Key::F21,
            311 => Key::F22,
            312 => Key::F23,
            313 => Key::F24,
            314 => Key::F25,
            320 => Key::Kp0,
            321 => Key::Kp1,
            322 => Key::Kp2,
            323 => Key::Kp3,
            324 => Key::Kp4,
            325 => Key::Kp5,
            326 => Key::Kp6,
            327 => Key::Kp7,
            328 => Key::Kp8,
            329 => Key::Kp9,
            330 => Key::KpDecimal,
            331 => Key::KpDivide,
            332 => Key::KpMultiply,
            333 => Key::KpSubtract,
            334 => Key::KpAdd,
            335 => Key::KpEnter,
            336 => Key::KpEqual,
            340 => Key::LeftShift,
            341 => Key::LeftControl,
            342 => Key::LeftAlt,
            343 => Key::LeftSuper,
            344 => Key::RightShift,
            345 => Key::RightControl,
            346 => Key::RightAlt,
            347 => Key::RightSuper,
            348 => Key::Menu,
            161 => Key::World1,
            162 => Key::World2,
            _ => Key::Unknown,
        }
    }
}

impl From<Key> for i32 {
    fn from(key: Key) -> Self {
        key.code()
    }
}

#[cfg(test)]
mod tests {
    use super::Key;

    #[test]
    fn test_key_values() {
        // Create a vector of all Key variants
        let keys = vec![
            Key::Space,
            Key::Apostrophe,
            Key::Comma,
            Key::Minus,
            Key::Period,
            Key::Slash,
            Key::Num0,
            Key::Num1,
            Key::Num2,
            Key::Num3,
            Key::Num4,
            Key::Num5,
            Key::Num6,
            Key::Num7,
            Key::Num8,
            Key::Num9,
            Key::Semicolon,
            Key::Equal,
            Key::A,
            Key::B,
            Key::C,
            Key::D,
            Key::E,
            Key::F,
            Key::G,
            Key::H,
            Key::I,
            Key::J,
            Key::K,
            Key::L,
            Key::M,
            Key::N,
            Key::O,
            Key::P,
            Key::Q,
            Key::R,
            Key::S,
            Key::T,
            Key::U,
            Key::V,
            Key::W,
            Key::X,
            Key::Y,
            Key::Z,
            Key::LeftBracket,
            Key::Backslash,
            Key::RightBracket,
            Key::GraveAccent,
            Key::Escape,
            Key::Enter,
            Key::Tab,
            Key::Backspace,
            Key::Insert,
            Key::Delete,
            Key::Right,
            Key::Left,
            Key::Down,
            Key::Up,
            Key::PageUp,
            Key::PageDown,
            Key::Home,
            Key::End,
            Key::CapsLock,
            Key::ScrollLock,
            Key::NumLock,
            Key::PrintScreen,
            Key::Pause,
            Key::F1,
            Key::F2,
            Key::F3,
            Key::F4,
            Key::F5,
            Key::F6,
            Key::F7,
            Key::F8,
            Key::F9,
            Key::F10,
            Key::F11,
            Key::F12,
            Key::F13,
            Key::F14,
            Key::F15,
            Key::F16,
            Key::F17,
            Key::F18,
            Key::F19,
            Key::F20,
            Key::F21,
            Key::F22,
            Key::F23,
            Key::F24,
            Key::F25,
            Key::Kp0,
            Key::Kp1,
            Key::Kp2,
            Key::Kp3,
            Key::Kp4,
            Key::Kp5,
            Key::Kp6,
            Key::Kp7,
            Key::Kp8,
            Key::Kp9,
            Key::KpDecimal,
            Key::KpDivide,
            Key::KpMultiply,
            Key::KpSubtract,
            Key::KpAdd,
            Key::KpEnter,
            Key::KpEqual,
            Key::LeftShift,
            Key::LeftControl,
            Key::LeftAlt,
            Key::LeftSuper,
            Key::RightShift,
            Key::RightControl,
            Key::RightAlt,
            Key::RightSuper,
            Key::Menu,
            Key::World1,
            Key::World2,
            Key::Unknown,
        ];

        for key in keys {
            let val: i32 = key.into();
            let key2: Key = val.into();

            assert_eq!(key, key2);
        }
    }
}
